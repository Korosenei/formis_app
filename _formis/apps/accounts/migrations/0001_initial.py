# Generated by Django 5.2.6 on 2025-09-24 23:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academic', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Token de réinitialisation',
                'verbose_name_plural': 'Tokens de réinitialisation',
                'db_table': 'comptes_password_reset_token',
            },
        ),
        migrations.CreateModel(
            name='ProfilApprenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statut_paiement', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('PARTIEL', 'Partiel'), ('COMPLET', 'Complet')], default='EN_ATTENTE', max_length=20)),
                ('nom_pere', models.CharField(blank=True, max_length=100, null=True)),
                ('telephone_pere', models.CharField(blank=True, max_length=20, null=True)),
                ('profession_pere', models.CharField(blank=True, max_length=100, null=True)),
                ('nom_mere', models.CharField(blank=True, max_length=100, null=True)),
                ('telephone_mere', models.CharField(blank=True, max_length=20, null=True)),
                ('profession_mere', models.CharField(blank=True, max_length=100, null=True)),
                ('nom_tuteur', models.CharField(blank=True, max_length=100, null=True)),
                ('telephone_tuteur', models.CharField(blank=True, max_length=20, null=True)),
                ('relation_tuteur', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Profil apprenant',
                'verbose_name_plural': 'Profils apprenants',
                'db_table': 'comptes_profil_apprenant',
            },
        ),
        migrations.CreateModel(
            name='ProfilEnseignant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_employe', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('date_embauche', models.DateField(blank=True, null=True)),
                ('specialisation', models.CharField(blank=True, max_length=100, null=True)),
                ('qualifications', models.TextField(blank=True, null=True)),
                ('est_permanent', models.BooleanField(default=False)),
                ('est_principal', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Profil enseignant',
                'verbose_name_plural': 'Profils enseignants',
                'db_table': 'comptes_profil_enseignant',
            },
        ),
        migrations.CreateModel(
            name='ProfilUtilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_contact_urgence', models.CharField(blank=True, max_length=100, null=True)),
                ('telephone_contact_urgence', models.CharField(blank=True, max_length=20, null=True)),
                ('relation_contact_urgence', models.CharField(blank=True, max_length=50, null=True)),
                ('groupe_sanguin', models.CharField(blank=True, max_length=5, null=True)),
                ('conditions_medicales', models.TextField(blank=True, null=True)),
                ('langue', models.CharField(default='fr', max_length=10)),
                ('fuseau_horaire', models.CharField(default='UTC', max_length=50)),
                ('recevoir_notifications', models.BooleanField(default=True)),
                ('recevoir_notifications_email', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Profil utilisateur',
                'verbose_name_plural': 'Profils utilisateurs',
                'db_table': 'comptes_profil_utilisateur',
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('SUPERADMIN', 'Super Administrateur'), ('ADMIN', "Administrateur d'établissement"), ('CHEF_DEPARTEMENT', 'Chef de département'), ('ENSEIGNANT', 'Enseignant'), ('APPRENANT', 'Apprenant')], default='APPRENANT', max_length=20)),
                ('matricule', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('prenom', models.CharField(max_length=100, verbose_name='Prénom')),
                ('nom', models.CharField(max_length=100, verbose_name='Nom')),
                ('date_naissance', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('lieu_naissance', models.CharField(blank=True, max_length=100, null=True, verbose_name='Lieu de naissance')),
                ('genre', models.CharField(blank=True, choices=[('M', 'Masculin'), ('F', 'Féminin')], max_length=1, null=True)),
                ('telephone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Téléphone')),
                ('adresse', models.TextField(blank=True, null=True, verbose_name='Adresse')),
                ('est_actif', models.BooleanField(default=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True)),
                ('photo_profil', models.ImageField(blank=True, null=True, upload_to='profils/')),
                ('cree_par', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='utilisateurs_crees', to=settings.AUTH_USER_MODEL)),
                ('departement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='academic.departement', verbose_name='Département')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'comptes_utilisateur',
                'ordering': ['-date_creation'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
